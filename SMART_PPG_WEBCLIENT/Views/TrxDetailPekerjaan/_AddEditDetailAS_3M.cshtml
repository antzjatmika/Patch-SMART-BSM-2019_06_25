@model MVCSmartClient01.Models.trxDetailPekerjaanAS_3M

@{
    Html.EnableClientValidation();
}
<link href="~/Content/css/font-awesome.min.css" rel="stylesheet" />
<script type="text/javascript" src="~/Scripts/SmartApps.js"></script>
<script type="text/javascript">
    function DisplayAttachment() {
        var fileEkstensi = '.jpg';
        fileEkstensi = '_SOLV' + '@Model.FileExt';
        //alert(fileEkstensi);
        window.open(('../Content/DocumentImages/XYZ123456789' + fileEkstensi).replace('XYZ123456789', '@Model.GuidHeader'), 'SOLV', 'toolbar=no, left=100,top=25,location=no, directories=no, status=no, menubar=no, width=700, height=700');
        return false;
    }
</script>

<div id="legend" style="margin-bottom:-10px">
    <legend style="font-size:medium" class="">Detail Pekerjaan</legend>
</div>

<style>
    #fileInputAtt {
        width: 0;
        height: 0;
    }
</style>

@using (Html.BeginForm("_AddEditDetailAS_3M", "TrxDetailPekerjaan", FormMethod.Post))
{
    @Html.HiddenFor(model => model.IdDetailPekerjaan)
    @Html.HiddenFor(model => model.IdRekanan)
    @Html.HiddenFor(model => model.GuidHeader)
    @Html.HiddenFor(model => model.CreatedDate)
    @Html.HiddenFor(model => model.CreatedUser)

    @Html.HiddenFor(model => model.FileExt, new { id = "id4FileExtAtt" })

    <div class="row">
        <form role="form">
            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                @Html.DevExpress().Label(
            settings =>
            {
                settings.ControlStyle.CssClass = "col-xs-3 control-label";
                settings.Text = "Tahun Laporan";
                settings.AssociatedControlName = "TahunLaporan";
            }
        ).GetHtml()
                @Html.DevExpress().SpinEdit(
            settings =>
            {
                settings.Name = "TahunLaporan";
                settings.ControlStyle.CssClass = "editor";
                settings.Width = 50;
                settings.Properties.SpinButtons.ShowIncrementButtons = false;
            }
   ).Bind(Model.TahunLaporan).GetHtml()
                @Html.ValidationMessageFor(model => model.TahunLaporan, null, new { @class = "validator" })
            </div>
            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                @Html.DevExpress().Label(
            settings =>
            {
                settings.ControlStyle.CssClass = "col-xs-3 control-label";
                settings.Text = "Laba Before Tax";
                settings.AssociatedControlName = "LabaBeforeTax";
            }
        ).GetHtml()
                @Html.DevExpress().SpinEdit(
            settings =>
            {
                settings.Name = "LabaBeforeTax";
                settings.ControlStyle.CssClass = "editor";
                settings.Width = 250;
                settings.Properties.SpinButtons.ShowIncrementButtons = false;
                settings.Properties.DisplayFormatString = "N";
                settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            }
).Bind(Model.LabaBeforeTax).GetHtml()
                @Html.ValidationMessageFor(model => model.LabaBeforeTax, null, new { @class = "validator" })
            </div>
            <div class="clearfix"></div>
            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                @Html.DevExpress().Label(
            settings =>
            {
                settings.ControlStyle.CssClass = "col-xs-3 control-label";
                settings.Text = "Triwulan Ke";
                settings.AssociatedControlName = "TriwulanLaporan";
            }
        ).GetHtml()
            @Html.DevExpress().ComboBoxFor(x => x.TriwulanLaporan,
            settings =>
            {
                settings.Name = "TriwulanLaporan";
                settings.ControlStyle.CssClass = "control-field";
                settings.Properties.ValueField = "RefDesc";
                settings.Properties.TextField = "RefCode";
                settings.Width = 200;
                settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            }).BindList(Model.TriwulanColls).GetHtml()
                @*@Html.DevExpress().SpinEdit(
            settings =>
            {
                settings.Name = "TriwulanLaporan";
                settings.ControlStyle.CssClass = "editor";
                settings.Width = 50;
                settings.Properties.SpinButtons.ShowIncrementButtons = false;
            }
   ).Bind(Model.TahunLaporan).GetHtml()*@
                @Html.ValidationMessageFor(model => model.TriwulanLaporan, null, new { @class = "validator" })
            </div>
            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                @Html.DevExpress().Label(
            settings =>
            {
                settings.ControlStyle.CssClass = "col-xs-3 control-label";
                settings.Text = "Premi Netto";
                settings.AssociatedControlName = "PremiNetto";
            }
        ).GetHtml()
                @Html.DevExpress().SpinEdit(
            settings =>
            {
                settings.Name = "PremiNetto";
                settings.ControlStyle.CssClass = "editor";
                settings.Width = 250;
                settings.Properties.SpinButtons.ShowIncrementButtons = false;
                settings.Properties.DisplayFormatString = "N";
                settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            }
).Bind(Model.PremiNetto).GetHtml()
                @Html.ValidationMessageFor(model => model.PremiNetto, null, new { @class = "validator" })
            </div>
            <div class="clearfix"></div>
            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                @Html.DevExpress().Label(
            settings =>
            {
                settings.ControlStyle.CssClass = "col-xs-3 control-label";
                settings.Text = "Nama Asuransi";
                settings.AssociatedControlName = "DebiturName";
            }
        ).GetHtml()
                @Html.DevExpress().TextBox(
            settings =>
            {
                settings.Name = "NamaAsuransi";
                settings.ControlStyle.CssClass = "editor";
                settings.Width = 250;
                settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            }
).Bind(Model.NamaAsuransi).GetHtml()
                @Html.ValidationMessageFor(model => model.NamaAsuransi, null, new { @class = "validator" })
            </div>
            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                @Html.DevExpress().Label(
            settings =>
            {
                settings.ControlStyle.CssClass = "col-xs-3 control-label";
                settings.Text = "RBC %";
                settings.AssociatedControlName = "RBCPercent";
            }
        ).GetHtml()
                @Html.DevExpress().SpinEdit(
            settings =>
            {
                settings.Name = "RBCPercent";
                settings.ControlStyle.CssClass = "editor";
                settings.Width = 250;
                settings.Properties.SpinButtons.ShowIncrementButtons = false;
                settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            }
).Bind(Model.RBCPercent).GetHtml()
                @Html.ValidationMessageFor(model => model.RBCPercent, null, new { @class = "validator" })
            </div>
            <div class="clearfix"></div>
            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                @Html.DevExpress().Label(
            settings =>
            {
                settings.ControlStyle.CssClass = "col-xs-3 control-label";
                settings.Text = "Jenis Asuransi";
                settings.AssociatedControlName = "JenisAsuransi";
            }
        ).GetHtml()
                @Html.DevExpress().TextBox(
            settings =>
            {
                settings.Name = "JenisAsuransi";
                settings.ControlStyle.CssClass = "editor";
                settings.Width = 250;
                settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            }
).Bind(Model.JenisAsuransi).GetHtml()
                @Html.ValidationMessageFor(model => model.JenisAsuransi, null, new { @class = "validator" })
            </div>
            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                @Html.DevExpress().Label(
            settings =>
            {
                settings.ControlStyle.CssClass = "col-xs-3 control-label";
                settings.Text = "Total Ekuitas Sebelumnya";
                settings.AssociatedControlName = "TotalEkuitasSebelumnya";
            }
        ).GetHtml()
                @Html.DevExpress().SpinEdit(
            settings =>
            {
                settings.Name = "TotalEkuitasSebelumnya";
                settings.ControlStyle.CssClass = "editor";
                settings.Width = 250;
                settings.Properties.SpinButtons.ShowIncrementButtons = false;
                settings.Properties.DisplayFormatString = "N";
                settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            }
).Bind(Model.TotalEkuitasSebelumnya).GetHtml()
                @Html.ValidationMessageFor(model => model.TotalEkuitasSebelumnya, null, new { @class = "validator" })
            </div>
            <div class="clearfix"></div>
            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                @Html.DevExpress().Label(
            settings =>
            {
                settings.ControlStyle.CssClass = "col-xs-3 control-label";
                settings.Text = "Laba Rugi Komprehensif";
                settings.AssociatedControlName = "LabaRugiKomprehensif";
            }
        ).GetHtml()
                @Html.DevExpress().SpinEdit(
            settings =>
            {
                settings.Name = "LabaRugiKomprehensif";
                settings.ControlStyle.CssClass = "editor";
                settings.Width = 250;
                settings.Properties.SpinButtons.ShowIncrementButtons = false;
                settings.Properties.DisplayFormatString = "N";
                settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            }
).Bind(Model.LabaRugiKomprehensif).GetHtml()
                @Html.ValidationMessageFor(model => model.LabaRugiKomprehensif, null, new { @class = "validator" })
            </div>
            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                @Html.DevExpress().Label(
            settings =>
            {
                settings.ControlStyle.CssClass = "col-xs-3 control-label";
                settings.Text = "Total Ekuitas Berjalan";
                settings.AssociatedControlName = "TotalEkuitasBerjalan";
            }
        ).GetHtml()
                @Html.DevExpress().SpinEdit(
            settings =>
            {
                settings.Name = "TotalEkuitasBerjalan";
                settings.ControlStyle.CssClass = "editor";
                settings.Width = 250;
                settings.Properties.SpinButtons.ShowIncrementButtons = false;
                settings.Properties.DisplayFormatString = "N";
                settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            }
).Bind(Model.TotalEkuitasBerjalan).GetHtml()
                @Html.ValidationMessageFor(model => model.TotalEkuitasBerjalan, null, new { @class = "validator" })
            </div>
            <div class="clearfix"></div>
            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                @Html.DevExpress().Label(
            settings =>
            {
                settings.ControlStyle.CssClass = "col-xs-3 control-label";
                settings.Text = "Cadangan Teknis";
                settings.AssociatedControlName = "CadanganTeknis";
            }
        ).GetHtml()
                @Html.DevExpress().SpinEdit(
            settings =>
            {
                settings.Name = "CadanganTeknis";
                settings.ControlStyle.CssClass = "editor";
                settings.Width = 250;
                settings.Properties.SpinButtons.ShowIncrementButtons = false;
                settings.Properties.DisplayFormatString = "N";
                settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            }
).Bind(Model.CadanganTeknis).GetHtml()
                @Html.ValidationMessageFor(model => model.CadanganTeknis, null, new { @class = "validator" })
            </div>
            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                @Html.DevExpress().Label(
            settings =>
            {
                settings.ControlStyle.CssClass = "col-xs-3 control-label";
                settings.Text = "Cabang BSM";
                settings.AssociatedControlName = "IdRegion"; //yang disimpan kode subRegion
            }
        ).GetHtml()
                @Html.DevExpress().ComboBoxFor(x => x.IdRegion,
                settings =>
                {
                    settings.Name = "IdRegion";
                    settings.ControlStyle.CssClass = "control-field";
                    settings.Properties.ValueField = "IdSubRegion";
                    settings.Properties.TextField = "SubDescription";
                    settings.Width = 250;
                    settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
                    settings.ReadOnly = @ViewBag.IsPcp;
                }).BindList(Model.SubRegionColls).GetHtml()
                @Html.ValidationMessageFor(model => model.IdRegion, null, new { @class = "validator" })

                @*@Html.DevExpress().Label(
            settings =>
            {
                settings.ControlStyle.CssClass = "col-xs-3 control-label";
                settings.Text = "Rata Rata Ekuitas";
                settings.AssociatedControlName = "RataRataEkuitas";
            }
        ).GetHtml()
                @Html.DevExpress().SpinEdit(
            settings =>
            {
                settings.Name = "RataRataEkuitas";
                settings.ControlStyle.CssClass = "editor";
                settings.Width = 250;
                settings.Properties.SpinButtons.ShowIncrementButtons = false;
                settings.Properties.DisplayFormatString = "N";
                settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            }
).Bind(Model.RataRataEkuitas).GetHtml()
                @Html.ValidationMessageFor(model => model.RataRataEkuitas, null, new { @class = "validator" })*@
            </div>
            <div class="clearfix"></div>
            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                @Html.DevExpress().Label(
            settings =>
            {
                settings.ControlStyle.CssClass = "col-xs-3 control-label";
                settings.Text = "Hasil Investasi";
                settings.AssociatedControlName = "HasilInvestasi";
            }
        ).GetHtml()
                @Html.DevExpress().SpinEdit(
            settings =>
            {
                settings.Name = "HasilInvestasi";
                settings.ControlStyle.CssClass = "editor";
                settings.Width = 250;
                settings.Properties.SpinButtons.ShowIncrementButtons = false;
                settings.Properties.DisplayFormatString = "N";
                settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            }
).Bind(Model.HasilInvestasi).GetHtml()
                @Html.ValidationMessageFor(model => model.HasilInvestasi, null, new { @class = "validator" })
            </div>
            <div class="form-group col-xs-10 col-sm-6 col-md-6 col-lg-6">
                @Html.DevExpress().Label(
            settings =>
            {
                settings.ControlStyle.CssClass = "col-xs-3 control-label";
                settings.Text = "Upload Laporan Solvabilitas (PDF)";
                settings.AssociatedControlName = "LaporanPDF";
            }
                ).GetHtml()

                <div class="col-xs-1 nopadding">
                    <input type='file' id='fileInputAtt' name='file' style='display: none'/>
                    <button id='btnUploadAtt' class="fa fa-upload" data-toggle="tooltip" title="Upload dokumen !"></button>
                </div>
                <div id="MyDivAtt" class="col-xs-5 nopadding">
                    <a href="javascript:void(0);" id="MyDivAtt" onclick="DisplayMe1(this)">File yang diupload</a>
                </div>
                <div id="MyDelAtt" class="col-xs-1 nopadding">
                    <a href="javascript:void(0);" id="MyDelAtt" onclick="RemoveMeLocal1(this)">X</a>
                </div>
                <div class="clearfix"></div>
                <div id="DisplayAtt">
                    <!-- The Modal -->
                    <div id="MyModal1" class="modal">
                        <div class="modal-content">
                            <span class="close" onclick="CloseMe1()" style=padding:0px;>&times;</span>
                            <object data=@Html.Raw("/Content/DocumentImages/" + @Model.GuidHeader + "_SOLV" + @Model.FileExt + "?" + DateTime.Now.Ticks.ToString()) class="mdlcontain"></object>
                        </div>
                    </div>
                </div>

                @*@Html.DevExpress().UploadControl(
            ucSettings =>
            {
                ucSettings.ControlStyle.CssClass = "col-xs-1 control-label";
                ucSettings.Name = "uploadControlSOLV";
                ucSettings.ShowUploadButton = true;
                ucSettings.UploadButton.Text = "Upload PDF";
                ucSettings.AddUploadButtonsSpacing = 5;
                ucSettings.AddUploadButtonsHorizontalPosition = AddUploadButtonsHorizontalPosition.Left;
                ucSettings.CallbackRouteValues = new { Controller = "TrxDataOrganisasi", Action = "ImageUpload", UploaderCtl = "uploadControlSOLV" };
                ucSettings.Width = 250;
                ucSettings.ToolTip = "Upload file .JPG, .JPEG, .JPE, .PNG, .PDF dengan kapasitas kurang dari 4 MB";
            }).GetHtml()
                &nbsp;&nbsp;
                <button style="font-size:small" type="button" onclick="return DisplayAttachment()">Gambar</button>*@

            </div>
            <div class="clearfix"></div>
        </form>

        @Html.DevExpress().Button(
            settings =>
            {
                settings.Name = "btnUpdate";
                settings.ControlStyle.CssClass = "button";
                settings.Text = "Update";
                settings.UseSubmitBehavior = true;
                settings.ClientVisible = false;
            }
        ).GetHtml()
        @Html.DevExpress().Button(
            settings =>
            {
                settings.Name = "btnCancel";
                settings.ControlStyle.CssClass = "button";
                settings.Text = "Cancel";
                settings.ClientSideEvents.Click = "function(s, e){ document.location='" + DevExpressHelper.GetUrl(new { Controller = "TrxDetailPekerjaan", Action = "GetByRekanan" }) + "'; }";
                settings.ClientVisible = false;
            }
        ).GetHtml()

        @Html.DevExpress().Button(
            settings =>
            {
                settings.Name = "btnClose";
                settings.ControlStyle.CssClass = "button";
                settings.Text = "Cancel";
                settings.ClientSideEvents.Click = "function(s, e){ document.location='" + DevExpressHelper.GetUrl(new { Controller = "TrxDetailPekerjaan", Action = @ViewBag.CallBackAction }) + "'; }";
                //settings.ClientSideEvents.Click = "function(s, e) { document.location='" + DevExpressHelper.GetUrl(new { Controller = "TrxDetailPekerjaan", Action = "GetByRekanan" }) + "?IdTypeOfRekanan=2' }";
                settings.ClientVisible = false;
            }
        ).GetHtml()

        @if (ViewBag.IsPcp)
        {
            <button style="visibility:@ViewBag.ButTutup" type="button" class="btn btn-success dropdown-toggle" onclick="$('#btnClose').click();">
                <span class="glyphicon glyphicon-remove"></span>&nbsp;Tutup
            </button>
        }
        else
        {
            <button type="button" class="btn btn-success dropdown-toggle" onclick="$('#btnUpdate').click();">
                <span class="glyphicon glyphicon-ok"></span>&nbsp;Simpan
            </button>
            <button type="button" class="btn btn-danger dropdown-toggle" onclick="$('#btnCancel').click();">
                <span class="glyphicon glyphicon-remove"></span>&nbsp;Batal
            </button>
        }
    </div>
}

<script>

    $(function () {

        if ($('#id4FileExtAtt').val() == '') {
            document.getElementById("MyDivAtt").style.display = "none";
            document.getElementById("MyDelAtt").style.display = "none";
            var $el = $('#fileInput');
            $el.val('');
        }

        $('#btnUploadAtt').click(function (e) {
            e.preventDefault();
            $('#fileInputAtt').click();
        }
        );
    });
    ///ini yang digunakan
    $('#fileInputAtt').change(function (e) {
        file = e.target.files[0];
        var myFileExt = (file.name.match(/[^\\\/]\.([^.\\\/]+)$/) || [null]).pop();
        $('#id4FileExtAtt').val('.' + myFileExt);
        DoUpload('@Model.GuidHeader' + '_SOLV', 'MyDivAtt', 'MyDelAtt', 1);
    });

    function RemoveMeLocal1(elm) {
        $('#id4FileExtAtt').val('');
        RemoveMe(elm, 'MyDivAtt');
    }

    var myModal1 = document.getElementById('MyModal1');

</script>
